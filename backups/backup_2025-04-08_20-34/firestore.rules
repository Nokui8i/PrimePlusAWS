rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidUsername(username) {
      return username.matches('^[a-z0-9][a-z0-9]*[a-z0-9]$') 
        && username.size() >= 3 
        && username.size() <= 30;
    }

    function isValidUserProfile() {
      let data = request.resource.data;
      let requiredFields = ['email', 'username', 'displayName', 'createdAt', 'lastLogin'];
      let hasRequiredFields = data.keys().hasAll(requiredFields);
      let isUserMatch = request.auth.uid == request.resource.id;
      
      // Add type validation
      let hasValidTypes = 
        data.email is string && 
        data.username is string &&
        data.displayName is string && 
        data.createdAt is timestamp && 
        data.lastLogin is timestamp &&
        (data.bio == null || data.bio is string) &&
        (data.avatar == null || data.avatar is string) &&
        (data.role == null || data.role in ['user', 'creator', 'admin']);
      
      // Add length validation
      let hasValidLengths =
        isValidUsername(data.username) &&
        data.displayName.size() >= 3 &&
        data.displayName.size() <= 50 &&
        (data.bio == null || data.bio.size() <= 500);
      
      return hasRequiredFields && isUserMatch && hasValidTypes && hasValidLengths;
    }

    function isValidPost() {
      let data = request.resource.data;
      let hasRequiredFields = data.keys().hasAll(['content', 'userId', 'createdAt', 'type', 'status']);
      let isUserMatch = data.userId == request.auth.uid;
      
      // Content validation
      let isValidContent = 
        data.content is string && 
        data.content.size() > 0 && 
        data.content.size() <= 50000;  // 50KB limit
      
      // Metadata validation
      let hasValidMetadata = 
        data.createdAt is timestamp &&
        data.type in ['article', 'image', 'video', 'link'] &&
        data.status in ['draft', 'published', 'archived'] &&
        (data.tags == null || (data.tags is list && data.tags.size() <= 10)) &&
        (data.title == null || (data.title is string && data.title.size() <= 200));
      
      return hasRequiredFields && isUserMatch && isValidContent && hasValidMetadata;
    }

    function isValidComment() {
      let data = request.resource.data;
      let hasRequiredFields = data.keys().hasAll(['content', 'userId', 'createdAt']);
      let isUserMatch = data.userId == request.auth.uid;
      let isValidContent = data.content is string && data.content.size() > 0;
      return hasRequiredFields && isUserMatch && isValidContent;
    }

    function isValidFollow() {
      let data = request.resource.data;
      let hasRequiredFields = data.keys().hasAll(['followerId', 'followingId', 'createdAt']);
      let isFollowerMatch = data.followerId == request.auth.uid;
      return hasRequiredFields && isFollowerMatch;
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;  // Allow public read access for search
      allow list: if true;  // Explicitly allow listing users
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false;
    }

    // Usernames collection for uniqueness check
    match /usernames/{username} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && isValidUsername(username)
        && !exists(/databases/$(database)/documents/usernames/$(username));
      allow delete: if false;
    }

    // Posts collection
    match /posts/{postId} {
      allow read, list: if true;  // Allow public read access
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Follows collection
    match /follows/{followId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && resource.data.followerId == request.auth.uid;
    }

    // Subscriptions collection
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.subscriberId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.subscriberId == request.auth.uid;
    }

    // Topics collection
    match /topics/{topicId} {
      allow read: if true;
      allow write: if false;
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 